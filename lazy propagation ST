void updateRange(int node, int start, int end, int l, int r, int val){
    
    if(start > end or start > r or end < l)
        return;
    if(lazy[node] != 0){
        tree[node] +=  lazy[node];
        if(start != end){
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }
    
    if(start >= l and end <= r){
        tree[node] +=  val;
        if(start != end){
            lazy[node*2] += val;
            lazy[node*2+1] += val;
        }
        return;
    }
    int mid = (start + end) / 2;
    updateRange(node*2, start, mid, l, r, val);
    updateRange(node*2 + 1, mid + 1, end, l, r, val);
    tree[node] = min(tree[node*2],tree[node*2+1]);
}
void queryRange(int node, int start, int end, int l, int r,int x){
    if(start > end or start > r or end < l)
        return ;      
    if(lazy[node] != 0){
        tree[node] +=  lazy[node]; 
        if(start != end){
            lazy[node*2] += lazy[node];  
            lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }
    if(start >= l and end <= r){
        if(tree[node]>=x){
        ans+=(end-start+1);
        return ;}
    }
    int mid = (start + end) / 2;
    queryRange(node*2, start, mid, l, r,x);
     queryRange(node*2 + 1, mid + 1, end, l, r,x); 
    return ;
}
