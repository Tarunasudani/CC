struct Lazy_sg{
    vector<int> tree, lazy;
    void propagate(int node, int l, int r) {
      tree[node] +=  lazy[node]*( r- l + 1);
       if(l != r){
          lazy[node*2] += lazy[node];
          lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }

    void updateRange(int node, int start, int end, int l, int r, int val){
        
        if(start > end or start > r or end < l)
            return;
        if(lazy[node] != 0){
            propagate(node, start, end);
        }
        
        if(start >= l and end <= r){
            tree[node] +=  val*(end - start + 1);
            if(start != end){
                lazy[node*2] += val;
                lazy[node*2+1] += val;
            }
            return;
        }
        int mid = (start + end) / 2;
        updateRange(node*2, start, mid, l, r, val);
        updateRange(node*2 + 1, mid + 1, end, l, r, val);
        tree[node] = tree[node*2] + tree[node*2+1];
    }
    int queryRange(int node, int start, int end, int l, int r){
        if(start > end or start > r or end < l)
            return 0;      
        if(lazy[node] != 0){
            propagate(node, start, end);
        }
        if(start >= l and end <= r){
            return tree[node];
        }
        int mid = (start + end) / 2;
        return queryRange(node*2, start, mid, l, r) + queryRange(node*2 + 1, mid + 1, end, l, r); 
    }
     void build(int node, int start, int end,vector<int> & arr){
       if(start == end){
          tree[node] = arr[start];
       }
       else{
          int mid = (start + end) / 2;
          build(2*node, start, mid,arr);
          build(2*node+1, mid+1, end,arr);
          tree[node] = min(tree[2*node] , tree[2*node+1]);
       }
    }
    int query(int node, int start, int end, int l, int r){
      if(r < start || end < l){
         return INT_MAX;
      }
      if(lazy[node] != 0){
            propagate(node, start, end);
        }
      if(l <= start && end <= r){
         return tree[node];
      }
      int mid = (start + end) / 2;
      int p1 = query(2*node, start, mid, l, r);
      int p2 = query(2*node+1, mid+1, end, l, r);
      return min(p1,p2);
   }
};
