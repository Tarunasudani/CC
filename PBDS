
//FOR ORDERED_SET

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include<functional>
using namespace __gnu_pbds;

#define ordered_set tree<long, null_type,less<long>, rb_tree_tag,tree_order_statistics_node_update>



// FOR ORDERED_MULTISET

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include<functional>
using namespace __gnu_pbds;
  
#define ordered_set tree<long, null_type,less_equal<long>, rb_tree_tag,tree_order_statistics_node_update>

// to erase an element x in multiset : os.erase( os.find_by_order( x - 1 ) ); (if that exists)

functions : 
insert , erase, find : same as set

os.order_of_key(val); elements strictly less than val
os.find_by_order(k); iterator to kth element (0-based)
