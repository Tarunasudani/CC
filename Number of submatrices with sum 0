// can also be used for largest sum submatrix

int Solution::solve(vector<vector<int> > &A) {
    int n = A.size();
    if(n == 0)
    return 0;
    int m = A[0].size();
    if(m == 0)
    return 0;
    int ans = 0;
    map<int,int > dp[n+5];

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            dp[i][j] = dp[i][j-1] + A[i][j];
        }
    }
    for(int i=0;i<m;i++){
        for(int j=i;j<m;j++){
             
            vector<int> v;
            for(int k=0;k<n;k++){
                v.push_back(dp[k][j] - dp[k][i-1]);
            }
            map<int,int> mp;
            int sum = 0;
            mp[0] = 1;
            for(auto it : v){
                sum+=it;
                if(mp[sum]){
                    ans+=mp[sum];
                }
                mp[sum]++;
            }
            //cout<<v.size()<<"\n";
        }
    }
    
    return ans;
}
