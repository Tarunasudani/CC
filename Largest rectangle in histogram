class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
         stack<int> st;
        int ans = 0;
        int n = heights.size(),i=0;
        for( i;i<n;){
            // case 1 : when stack is empty or the top of the stack is less then current element
            if(st.empty() || heights[i]>=heights[st.top()]){
                st.push(i++);
            }
            // case 2 : when the top of the stack is greater the the current element then the current element is the right index for calculating the histogram
            else{
                int tp = st.top();
                st.pop();
                
                ans = max(ans, heights[tp] * (st.empty()?i:i-st.top()-1));
            }
        }
        if(!st.empty()){
            while(!st.empty()){
                int tp = st.top();
                st.pop();
                ans = max(ans, heights[tp] * (st.empty()?i:i-st.top()-1));
            }
        }
        
        return ans;
    }
};
