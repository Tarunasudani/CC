// Tarun IIITA
//Тарун Асудани 
//Не читайте этот код
 
#include<bits/stdc++.h>
using namespace std;
#define ll   long long
#define pb push_back
#define pf push_front
#define MP make_pair
#define all(v) v.begin(),v.end()
#define F first
#define lb lower_bound
#define ub upper_bound
#define bs binary_search
#define S second
#define maxn 2000005
#define pii pair<ll,ll>
#define boost ios_base::sync_with_stdio(false);cin.tie(NULL)
#define mod  1000000007
#define nl cout<<"\n"
#define int long long
#define OJ \
  freopen("input.txt", "r", stdin); \
  freopen("output.txt", "w", stdout);




vector<int> graph[maxn];
int LCA_dp[maxn][19] = {0} ;
unordered_map<int,int> visited,depth,parent;

int LCA( int u, int v ) {
  if(depth[u] < depth[v])  swap(u,v);  

  if(!u) return v;

  if(!v) return  u;

  if(u==v)  return u;

  for(int i = 17; i >= 0; --i)  
    if(depth[u]-(1<<i)>=depth[v])
      u=LCA_dp[u][i];

  if(u==v)  return u;  

  for(int i = 17; i >= 0; --i)
    if( LCA_dp[u][i] != LCA_dp[v][i] ) {
      u = LCA_dp[u][i];
      v = LCA_dp[v][i];
    }      
  return LCA_dp[u][0];    
}

void dfs(int s) {
  visited[s] = 1;
  for(auto it : graph[s]) {
    if(!visited[it]) {
      depth[it] = depth[s] + 1;
      parent[it] = s;
      dfs(it);
    }
  }
}


struct SG{
  int n;
  vector<int> tree;
  // can include the original array in this struct as per the problem

  void build(int node, int start, int end,vector<int> &arr){
    // arr is the original array upon which this segment tree is built.
    if( start == end ) {
      tree[node] = arr[start];
    } else {
      int mid = (start + end) / 2;
      build(2*node+1, start, mid,arr);
      build(2*node+2, mid+1, end,arr);
      tree[node] = LCA(tree[2*node+1] , tree[2*node+2]);
    }
  }


  int query(int node, int start, int end, int l, int r) {
    if( r < start || end < l ) {
      return 0;
    }
    if( l <= start && end <= r ) {
      return tree[node];
    }
    int mid = (start + end) / 2;
    int p1 = query(2*node+1, start, mid, l, r);
    int p2 = query(2*node+2, mid+1, end, l, r);
    return LCA(p1, p2);
  }
   
  SG( int N ) {
    n=N;
    tree.resize(4*n);
  }
};


void solve() {
  int n;
  cin >> n;

  for(int i=0; i<n-1; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].pb(v);
    graph[v].pb(u);
  }

  dfs(1);

  for(int i=1 ; i<=n; i++) LCA_dp[i][0] = parent[i];

  for(int i=1 ; i<18 ; i++) 
    for(int j=1 ; j<=n ; j++) 
      LCA_dp[j][i] = LCA_dp[ LCA_dp[j][i-1] ][ i-1 ];

  vector<int> leafs = {3,4,5};

  SG tree(3);
  tree.build(0, 0, 2, leafs);

  cout<<tree.query(0,0,2,1,2);

}

 //     1
 //    / \
 //   2   5
 //  / \
 // 3   4

signed main() {
#ifndef ONLINE_JUDGE
    OJ;
#endif
  boost;
  int t=1;
  //cin >> t;
  while(t--) {
    solve();
  }
}
